services:
  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: individuals-keycloak
    command: start-dev --import-realm
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
    volumes:
      - ./individuals-api/resources/realm-config.json:/opt/keycloak/data/import/realm-config.json
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    networks:
      - individuals-api-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8080/realms/master/.well-known/openid-configuration" ]
      interval: 10s
      timeout: 5s
      retries: 20

  keycloak-postgres:
    image: postgres:17
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - "5433:5432"
    networks:
      - individuals-api-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://keycloak:keycloak@keycloak-postgres:5432/keycloak?sslmode=disable"
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    networks:
      - individuals-api-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-person-service:
    image: postgres:15
    container_name: postgres-person
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: postgres-person
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
    networks:
      - individuals-api-network

  person-service:
    image: person-service:latest
    container_name: app-person-service
    ports:
      - "8098:8098"
    build:
      context: ./person-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - individuals-api-network


  individuals-api:
    image: individuals-api:latest
    container_name: individuals-api
    ports:
      - "8081:8081"
    build:
      context: ./individuals-api
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      keycloak:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - individuals-api-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8081/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 20s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
    networks:
      - individuals-api-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 10s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
    networks:
      - individuals-api-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:10.3.1
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - individuals-api-network
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  individuals-api-network:
    driver: bridge

volumes:
  postgres_data: